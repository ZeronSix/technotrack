/*!
 * \file
 * CPU architecture header generated by a script.
 * WARNING! DO NO EDIT! AUTOMATICALLY GENERATED!!!
 */
#ifndef cpu_arch_h
#define cpu_arch_h 
#include <string.h>

/*!
 * Macro that compares a string with the specified command's name
 */
#define CMD_CMP_NAME(_cmd_, _s_) (strcasecmp(CMD_NAME_ ## _cmd_, _s_) == 0)

/*!
 * Address modes.
 */
enum
{
    ADDR_MODE_UNKNOWN = 1,
    ADDR_MODE_CONST = 2,
    ADDR_MODE_REGISTER = 3
};

/*!
 * Command codes.
 */
enum
{
    CMD_UNKNOWN = 1,
    CMD_PUSH = 128,
    CMD_POP = 129,
    CMD_ADD = 130,
    CMD_SUB = 131,
    CMD_MUL = 132,
    CMD_DIV = 133,
    CMD_SIN = 134,
    CMD_COS = 135,
    CMD_SQRT = 136,
    CMD_IN = 137,
    CMD_OUT = 138,
    CMD_MOV = 139,
    CMD_JMP = 140,
    CMD_JE = 141,
    CMD_JNE = 142,
    CMD_JA = 143,
    CMD_JAE = 144,
    CMD_JB = 145,
    CMD_JBE = 146
};

/*!
 * Register codes.
 */
enum
{
    REG_UNKNOWN = 1,
    REG_AX = 2,
    REG_BX = 3,
    REG_CX = 4,
    REG_DX = 5,
    REG_SP = 6
};

extern const char *CMD_NAME_PUSH;
extern const char *CMD_NAME_POP;
extern const char *CMD_NAME_ADD;
extern const char *CMD_NAME_SUB;
extern const char *CMD_NAME_MUL;
extern const char *CMD_NAME_DIV;
extern const char *CMD_NAME_SIN;
extern const char *CMD_NAME_COS;
extern const char *CMD_NAME_SQRT;
extern const char *CMD_NAME_IN;
extern const char *CMD_NAME_OUT;
extern const char *CMD_NAME_MOV;
extern const char *CMD_NAME_JMP;
extern const char *CMD_NAME_JE;
extern const char *CMD_NAME_JNE;
extern const char *CMD_NAME_JA;
extern const char *CMD_NAME_JAE;
extern const char *CMD_NAME_JB;
extern const char *CMD_NAME_JBE;


extern const char *REG_NAME_AX;
extern const char *REG_NAME_BX;
extern const char *REG_NAME_CX;
extern const char *REG_NAME_DX;
extern const char *REG_NAME_SP;


/*!
 * Command reader.
 */
#define CMD_READER(_ptr_, _str_, _len_, _code_, _err_code_) \
{ \
    if (strcasecmp(CMD_NAME_PUSH, str) == 0) \
    {\
        *_ptr_ += _len_; \
        *_code_ = 128; \
    }\
    else if (strcasecmp(CMD_NAME_POP, str) == 0) \
    {\
        *_ptr_ += _len_; \
        *_code_ = 129; \
    }\
    else if (strcasecmp(CMD_NAME_ADD, str) == 0) \
    {\
        *_ptr_ += _len_; \
        *_code_ = 130; \
    }\
    else if (strcasecmp(CMD_NAME_SUB, str) == 0) \
    {\
        *_ptr_ += _len_; \
        *_code_ = 131; \
    }\
    else if (strcasecmp(CMD_NAME_MUL, str) == 0) \
    {\
        *_ptr_ += _len_; \
        *_code_ = 132; \
    }\
    else if (strcasecmp(CMD_NAME_DIV, str) == 0) \
    {\
        *_ptr_ += _len_; \
        *_code_ = 133; \
    }\
    else if (strcasecmp(CMD_NAME_SIN, str) == 0) \
    {\
        *_ptr_ += _len_; \
        *_code_ = 134; \
    }\
    else if (strcasecmp(CMD_NAME_COS, str) == 0) \
    {\
        *_ptr_ += _len_; \
        *_code_ = 135; \
    }\
    else if (strcasecmp(CMD_NAME_SQRT, str) == 0) \
    {\
        *_ptr_ += _len_; \
        *_code_ = 136; \
    }\
    else if (strcasecmp(CMD_NAME_IN, str) == 0) \
    {\
        *_ptr_ += _len_; \
        *_code_ = 137; \
    }\
    else if (strcasecmp(CMD_NAME_OUT, str) == 0) \
    {\
        *_ptr_ += _len_; \
        *_code_ = 138; \
    }\
    else if (strcasecmp(CMD_NAME_MOV, str) == 0) \
    {\
        *_ptr_ += _len_; \
        *_code_ = 139; \
    }\
    else if (strcasecmp(CMD_NAME_JMP, str) == 0) \
    {\
        *_ptr_ += _len_; \
        *_code_ = 140; \
    }\
    else if (strcasecmp(CMD_NAME_JE, str) == 0) \
    {\
        *_ptr_ += _len_; \
        *_code_ = 141; \
    }\
    else if (strcasecmp(CMD_NAME_JNE, str) == 0) \
    {\
        *_ptr_ += _len_; \
        *_code_ = 142; \
    }\
    else if (strcasecmp(CMD_NAME_JA, str) == 0) \
    {\
        *_ptr_ += _len_; \
        *_code_ = 143; \
    }\
    else if (strcasecmp(CMD_NAME_JAE, str) == 0) \
    {\
        *_ptr_ += _len_; \
        *_code_ = 144; \
    }\
    else if (strcasecmp(CMD_NAME_JB, str) == 0) \
    {\
        *_ptr_ += _len_; \
        *_code_ = 145; \
    }\
    else if (strcasecmp(CMD_NAME_JBE, str) == 0) \
    {\
        *_ptr_ += _len_; \
        *_code_ = 146; \
    }\
    else \
    { \
        return _err_code_; \
    } \
}


/*!
 * Register reader.
 */
#define REG_READER(_ptr_, _str_, _len_, _code_, _err_code_) \
{ \
    if (strcasecmp(REG_NAME_AX, str) == 0) \
    {\
        *_ptr_ += _len_; \
        *_code_ = 2; \
    }\
    else if (strcasecmp(REG_NAME_BX, str) == 0) \
    {\
        *_ptr_ += _len_; \
        *_code_ = 3; \
    }\
    else if (strcasecmp(REG_NAME_CX, str) == 0) \
    {\
        *_ptr_ += _len_; \
        *_code_ = 4; \
    }\
    else if (strcasecmp(REG_NAME_DX, str) == 0) \
    {\
        *_ptr_ += _len_; \
        *_code_ = 5; \
    }\
    else if (strcasecmp(REG_NAME_SP, str) == 0) \
    {\
        *_ptr_ += _len_; \
        *_code_ = 6; \
    }\
    else \
    { \
        return _err_code_; \
    } \
}


/*!
 * Command writer.
 */
#define CMD_WRITER(_fout_, _code_) \
{ \
    switch (_code_) \
    { \
    case 128: \
        fprintf(_fout_, "%s", "push"); \
        break; \
    case 129: \
        fprintf(_fout_, "%s", "pop"); \
        break; \
    case 130: \
        fprintf(_fout_, "%s", "add"); \
        break; \
    case 131: \
        fprintf(_fout_, "%s", "sub"); \
        break; \
    case 132: \
        fprintf(_fout_, "%s", "mul"); \
        break; \
    case 133: \
        fprintf(_fout_, "%s", "div"); \
        break; \
    case 134: \
        fprintf(_fout_, "%s", "sin"); \
        break; \
    case 135: \
        fprintf(_fout_, "%s", "cos"); \
        break; \
    case 136: \
        fprintf(_fout_, "%s", "sqrt"); \
        break; \
    case 137: \
        fprintf(_fout_, "%s", "in"); \
        break; \
    case 138: \
        fprintf(_fout_, "%s", "out"); \
        break; \
    case 139: \
        fprintf(_fout_, "%s", "mov"); \
        break; \
    case 140: \
        fprintf(_fout_, "%s", "jmp"); \
        break; \
    case 141: \
        fprintf(_fout_, "%s", "je"); \
        break; \
    case 142: \
        fprintf(_fout_, "%s", "jne"); \
        break; \
    case 143: \
        fprintf(_fout_, "%s", "ja"); \
        break; \
    case 144: \
        fprintf(_fout_, "%s", "jae"); \
        break; \
    case 145: \
        fprintf(_fout_, "%s", "jb"); \
        break; \
    case 146: \
        fprintf(_fout_, "%s", "jbe"); \
        break; \
    default: \
        return ZCPU_ERR_WRONG_BINARY; \
    } \
}


/*!
 * Register writer.
 */
#define REG_WRITER(_fout_, _code_) \
{ \
    switch (_code_) \
    { \
    case 2: \
        fprintf(_fout_, "%s", "ax"); \
        break; \
    case 3: \
        fprintf(_fout_, "%s", "bx"); \
        break; \
    case 4: \
        fprintf(_fout_, "%s", "cx"); \
        break; \
    case 5: \
        fprintf(_fout_, "%s", "dx"); \
        break; \
    case 6: \
        fprintf(_fout_, "%s", "sp"); \
        break; \
    default: \
        return ZCPU_ERR_WRONG_BINARY; \
    } \
}


/*!
 * Argument handler for asm.
 */

#define ARG_ASM_HANDLER(_cmd_code_) switch (_cmd_code_) \
{ \
        case CMD_PUSH:\
            addr_mode = ADDR_MODE_CONST; \
            skip_comments(&str_ptr); \
            if (read_const_arg(&str_ptr, &arg) == ZCPU_OK) \
            { \
                addr_mode = 2; \
            } \
            else if (read_reg(&str_ptr, &reg) == ZCPU_OK) \
            { \
                addr_mode = 3; \
            } \
            else \
            { \
                return ZCPU_ERR_WRONG_INPUT; \
            } \
            \
            write_byte(&cur_ptr, addr_mode); \
            switch (addr_mode) \
            {\
                case ADDR_MODE_CONST: \
                    write_double(&cur_ptr, arg); \
                    break; \
                case ADDR_MODE_REGISTER: \
                    write_byte(&cur_ptr, reg); \
                    break; \
                default: \
                    return ZCPU_ERR_UNKNOWN_ADDR_MODE; \
            } \
\
 \
            break; \
        case CMD_POP:\
 \
            break; \
        case CMD_ADD:\
            addr_mode = ADDR_MODE_CONST; \
            skip_comments(&str_ptr); \
            if (read_const_arg(&str_ptr, &arg) == ZCPU_OK) \
            { \
                addr_mode = 2; \
            } \
            else if (read_reg(&str_ptr, &reg) == ZCPU_OK) \
            { \
                addr_mode = 3; \
            } \
            else \
            { \
                return ZCPU_ERR_WRONG_INPUT; \
            } \
            \
            write_byte(&cur_ptr, addr_mode); \
            switch (addr_mode) \
            {\
                case ADDR_MODE_CONST: \
                    write_double(&cur_ptr, arg); \
                    break; \
                case ADDR_MODE_REGISTER: \
                    write_byte(&cur_ptr, reg); \
                    break; \
                default: \
                    return ZCPU_ERR_UNKNOWN_ADDR_MODE; \
            } \
            if (check_for_comma(&str_ptr) != ZCPU_OK) \
            {{ \
                return ZCPU_ERR_WRONG_INPUT; \
            }}\
            addr_mode = ADDR_MODE_CONST; \
            skip_comments(&str_ptr); \
            if (read_const_arg(&str_ptr, &arg) == ZCPU_OK) \
            { \
                addr_mode = 2; \
            } \
            else if (read_reg(&str_ptr, &reg) == ZCPU_OK) \
            { \
                addr_mode = 3; \
            } \
            else \
            { \
                return ZCPU_ERR_WRONG_INPUT; \
            } \
            \
            write_byte(&cur_ptr, addr_mode); \
            switch (addr_mode) \
            {\
                case ADDR_MODE_CONST: \
                    write_double(&cur_ptr, arg); \
                    break; \
                case ADDR_MODE_REGISTER: \
                    write_byte(&cur_ptr, reg); \
                    break; \
                default: \
                    return ZCPU_ERR_UNKNOWN_ADDR_MODE; \
            } \
\
 \
            break; \
        case CMD_SUB:\
            addr_mode = ADDR_MODE_CONST; \
            skip_comments(&str_ptr); \
            if (read_const_arg(&str_ptr, &arg) == ZCPU_OK) \
            { \
                addr_mode = 2; \
            } \
            else if (read_reg(&str_ptr, &reg) == ZCPU_OK) \
            { \
                addr_mode = 3; \
            } \
            else \
            { \
                return ZCPU_ERR_WRONG_INPUT; \
            } \
            \
            write_byte(&cur_ptr, addr_mode); \
            switch (addr_mode) \
            {\
                case ADDR_MODE_CONST: \
                    write_double(&cur_ptr, arg); \
                    break; \
                case ADDR_MODE_REGISTER: \
                    write_byte(&cur_ptr, reg); \
                    break; \
                default: \
                    return ZCPU_ERR_UNKNOWN_ADDR_MODE; \
            } \
            if (check_for_comma(&str_ptr) != ZCPU_OK) \
            {{ \
                return ZCPU_ERR_WRONG_INPUT; \
            }}\
            addr_mode = ADDR_MODE_CONST; \
            skip_comments(&str_ptr); \
            if (read_const_arg(&str_ptr, &arg) == ZCPU_OK) \
            { \
                addr_mode = 2; \
            } \
            else if (read_reg(&str_ptr, &reg) == ZCPU_OK) \
            { \
                addr_mode = 3; \
            } \
            else \
            { \
                return ZCPU_ERR_WRONG_INPUT; \
            } \
            \
            write_byte(&cur_ptr, addr_mode); \
            switch (addr_mode) \
            {\
                case ADDR_MODE_CONST: \
                    write_double(&cur_ptr, arg); \
                    break; \
                case ADDR_MODE_REGISTER: \
                    write_byte(&cur_ptr, reg); \
                    break; \
                default: \
                    return ZCPU_ERR_UNKNOWN_ADDR_MODE; \
            } \
\
 \
            break; \
        case CMD_MUL:\
            addr_mode = ADDR_MODE_CONST; \
            skip_comments(&str_ptr); \
            if (read_const_arg(&str_ptr, &arg) == ZCPU_OK) \
            { \
                addr_mode = 2; \
            } \
            else if (read_reg(&str_ptr, &reg) == ZCPU_OK) \
            { \
                addr_mode = 3; \
            } \
            else \
            { \
                return ZCPU_ERR_WRONG_INPUT; \
            } \
            \
            write_byte(&cur_ptr, addr_mode); \
            switch (addr_mode) \
            {\
                case ADDR_MODE_CONST: \
                    write_double(&cur_ptr, arg); \
                    break; \
                case ADDR_MODE_REGISTER: \
                    write_byte(&cur_ptr, reg); \
                    break; \
                default: \
                    return ZCPU_ERR_UNKNOWN_ADDR_MODE; \
            } \
            if (check_for_comma(&str_ptr) != ZCPU_OK) \
            {{ \
                return ZCPU_ERR_WRONG_INPUT; \
            }}\
            addr_mode = ADDR_MODE_CONST; \
            skip_comments(&str_ptr); \
            if (read_const_arg(&str_ptr, &arg) == ZCPU_OK) \
            { \
                addr_mode = 2; \
            } \
            else if (read_reg(&str_ptr, &reg) == ZCPU_OK) \
            { \
                addr_mode = 3; \
            } \
            else \
            { \
                return ZCPU_ERR_WRONG_INPUT; \
            } \
            \
            write_byte(&cur_ptr, addr_mode); \
            switch (addr_mode) \
            {\
                case ADDR_MODE_CONST: \
                    write_double(&cur_ptr, arg); \
                    break; \
                case ADDR_MODE_REGISTER: \
                    write_byte(&cur_ptr, reg); \
                    break; \
                default: \
                    return ZCPU_ERR_UNKNOWN_ADDR_MODE; \
            } \
\
 \
            break; \
        case CMD_DIV:\
            addr_mode = ADDR_MODE_CONST; \
            skip_comments(&str_ptr); \
            if (read_const_arg(&str_ptr, &arg) == ZCPU_OK) \
            { \
                addr_mode = 2; \
            } \
            else if (read_reg(&str_ptr, &reg) == ZCPU_OK) \
            { \
                addr_mode = 3; \
            } \
            else \
            { \
                return ZCPU_ERR_WRONG_INPUT; \
            } \
            \
            write_byte(&cur_ptr, addr_mode); \
            switch (addr_mode) \
            {\
                case ADDR_MODE_CONST: \
                    write_double(&cur_ptr, arg); \
                    break; \
                case ADDR_MODE_REGISTER: \
                    write_byte(&cur_ptr, reg); \
                    break; \
                default: \
                    return ZCPU_ERR_UNKNOWN_ADDR_MODE; \
            } \
            if (check_for_comma(&str_ptr) != ZCPU_OK) \
            {{ \
                return ZCPU_ERR_WRONG_INPUT; \
            }}\
            addr_mode = ADDR_MODE_CONST; \
            skip_comments(&str_ptr); \
            if (read_const_arg(&str_ptr, &arg) == ZCPU_OK) \
            { \
                addr_mode = 2; \
            } \
            else if (read_reg(&str_ptr, &reg) == ZCPU_OK) \
            { \
                addr_mode = 3; \
            } \
            else \
            { \
                return ZCPU_ERR_WRONG_INPUT; \
            } \
            \
            write_byte(&cur_ptr, addr_mode); \
            switch (addr_mode) \
            {\
                case ADDR_MODE_CONST: \
                    write_double(&cur_ptr, arg); \
                    break; \
                case ADDR_MODE_REGISTER: \
                    write_byte(&cur_ptr, reg); \
                    break; \
                default: \
                    return ZCPU_ERR_UNKNOWN_ADDR_MODE; \
            } \
\
 \
            break; \
        case CMD_SIN:\
            addr_mode = ADDR_MODE_CONST; \
            skip_comments(&str_ptr); \
            if (read_const_arg(&str_ptr, &arg) == ZCPU_OK) \
            { \
                addr_mode = 2; \
            } \
            else if (read_reg(&str_ptr, &reg) == ZCPU_OK) \
            { \
                addr_mode = 3; \
            } \
            else \
            { \
                return ZCPU_ERR_WRONG_INPUT; \
            } \
            \
            write_byte(&cur_ptr, addr_mode); \
            switch (addr_mode) \
            {\
                case ADDR_MODE_CONST: \
                    write_double(&cur_ptr, arg); \
                    break; \
                case ADDR_MODE_REGISTER: \
                    write_byte(&cur_ptr, reg); \
                    break; \
                default: \
                    return ZCPU_ERR_UNKNOWN_ADDR_MODE; \
            } \
\
 \
            break; \
        case CMD_COS:\
            addr_mode = ADDR_MODE_CONST; \
            skip_comments(&str_ptr); \
            if (read_const_arg(&str_ptr, &arg) == ZCPU_OK) \
            { \
                addr_mode = 2; \
            } \
            else if (read_reg(&str_ptr, &reg) == ZCPU_OK) \
            { \
                addr_mode = 3; \
            } \
            else \
            { \
                return ZCPU_ERR_WRONG_INPUT; \
            } \
            \
            write_byte(&cur_ptr, addr_mode); \
            switch (addr_mode) \
            {\
                case ADDR_MODE_CONST: \
                    write_double(&cur_ptr, arg); \
                    break; \
                case ADDR_MODE_REGISTER: \
                    write_byte(&cur_ptr, reg); \
                    break; \
                default: \
                    return ZCPU_ERR_UNKNOWN_ADDR_MODE; \
            } \
\
 \
            break; \
        case CMD_SQRT:\
            addr_mode = ADDR_MODE_CONST; \
            skip_comments(&str_ptr); \
            if (read_const_arg(&str_ptr, &arg) == ZCPU_OK) \
            { \
                addr_mode = 2; \
            } \
            else if (read_reg(&str_ptr, &reg) == ZCPU_OK) \
            { \
                addr_mode = 3; \
            } \
            else \
            { \
                return ZCPU_ERR_WRONG_INPUT; \
            } \
            \
            write_byte(&cur_ptr, addr_mode); \
            switch (addr_mode) \
            {\
                case ADDR_MODE_CONST: \
                    write_double(&cur_ptr, arg); \
                    break; \
                case ADDR_MODE_REGISTER: \
                    write_byte(&cur_ptr, reg); \
                    break; \
                default: \
                    return ZCPU_ERR_UNKNOWN_ADDR_MODE; \
            } \
\
 \
            break; \
        case CMD_IN:\
            addr_mode = ADDR_MODE_CONST; \
            skip_comments(&str_ptr); \
            if (read_const_arg(&str_ptr, &arg) == ZCPU_OK) \
            { \
                addr_mode = 2; \
            } \
            else if (read_reg(&str_ptr, &reg) == ZCPU_OK) \
            { \
                addr_mode = 3; \
            } \
            else \
            { \
                return ZCPU_ERR_WRONG_INPUT; \
            } \
            \
            write_byte(&cur_ptr, addr_mode); \
            switch (addr_mode) \
            {\
                case ADDR_MODE_CONST: \
                    write_double(&cur_ptr, arg); \
                    break; \
                case ADDR_MODE_REGISTER: \
                    write_byte(&cur_ptr, reg); \
                    break; \
                default: \
                    return ZCPU_ERR_UNKNOWN_ADDR_MODE; \
            } \
\
 \
            break; \
        case CMD_OUT:\
 \
            break; \
        case CMD_MOV:\
            addr_mode = ADDR_MODE_CONST; \
            skip_comments(&str_ptr); \
            if (read_reg(&str_ptr, &reg) == ZCPU_OK) \
            { \
                addr_mode = 3; \
            } \
            else \
            { \
                return ZCPU_ERR_WRONG_INPUT; \
            } \
            \
            write_byte(&cur_ptr, addr_mode); \
            switch (addr_mode) \
            {\
                case ADDR_MODE_CONST: \
                    write_double(&cur_ptr, arg); \
                    break; \
                case ADDR_MODE_REGISTER: \
                    write_byte(&cur_ptr, reg); \
                    break; \
                default: \
                    return ZCPU_ERR_UNKNOWN_ADDR_MODE; \
            } \
            if (check_for_comma(&str_ptr) != ZCPU_OK) \
            {{ \
                return ZCPU_ERR_WRONG_INPUT; \
            }}\
            addr_mode = ADDR_MODE_CONST; \
            skip_comments(&str_ptr); \
            if (read_const_arg(&str_ptr, &arg) == ZCPU_OK) \
            { \
                addr_mode = 2; \
            } \
            else if (read_reg(&str_ptr, &reg) == ZCPU_OK) \
            { \
                addr_mode = 3; \
            } \
            else \
            { \
                return ZCPU_ERR_WRONG_INPUT; \
            } \
            \
            write_byte(&cur_ptr, addr_mode); \
            switch (addr_mode) \
            {\
                case ADDR_MODE_CONST: \
                    write_double(&cur_ptr, arg); \
                    break; \
                case ADDR_MODE_REGISTER: \
                    write_byte(&cur_ptr, reg); \
                    break; \
                default: \
                    return ZCPU_ERR_UNKNOWN_ADDR_MODE; \
            } \
\
 \
            break; \
        case CMD_JMP:\
            addr_mode = ADDR_MODE_CONST; \
            skip_comments(&str_ptr); \
            if (read_const_arg(&str_ptr, &arg) == ZCPU_OK) \
            { \
                addr_mode = 2; \
            } \
            else if (read_reg(&str_ptr, &reg) == ZCPU_OK) \
            { \
                addr_mode = 3; \
            } \
            else \
            { \
                return ZCPU_ERR_WRONG_INPUT; \
            } \
            \
            write_byte(&cur_ptr, addr_mode); \
            switch (addr_mode) \
            {\
                case ADDR_MODE_CONST: \
                    write_double(&cur_ptr, arg); \
                    break; \
                case ADDR_MODE_REGISTER: \
                    write_byte(&cur_ptr, reg); \
                    break; \
                default: \
                    return ZCPU_ERR_UNKNOWN_ADDR_MODE; \
            } \
\
 \
            break; \
        case CMD_JE:\
            addr_mode = ADDR_MODE_CONST; \
            skip_comments(&str_ptr); \
            if (read_const_arg(&str_ptr, &arg) == ZCPU_OK) \
            { \
                addr_mode = 2; \
            } \
            else if (read_reg(&str_ptr, &reg) == ZCPU_OK) \
            { \
                addr_mode = 3; \
            } \
            else \
            { \
                return ZCPU_ERR_WRONG_INPUT; \
            } \
            \
            write_byte(&cur_ptr, addr_mode); \
            switch (addr_mode) \
            {\
                case ADDR_MODE_CONST: \
                    write_double(&cur_ptr, arg); \
                    break; \
                case ADDR_MODE_REGISTER: \
                    write_byte(&cur_ptr, reg); \
                    break; \
                default: \
                    return ZCPU_ERR_UNKNOWN_ADDR_MODE; \
            } \
            if (check_for_comma(&str_ptr) != ZCPU_OK) \
            {{ \
                return ZCPU_ERR_WRONG_INPUT; \
            }}\
            addr_mode = ADDR_MODE_CONST; \
            skip_comments(&str_ptr); \
            if (read_const_arg(&str_ptr, &arg) == ZCPU_OK) \
            { \
                addr_mode = 2; \
            } \
            else if (read_reg(&str_ptr, &reg) == ZCPU_OK) \
            { \
                addr_mode = 3; \
            } \
            else \
            { \
                return ZCPU_ERR_WRONG_INPUT; \
            } \
            \
            write_byte(&cur_ptr, addr_mode); \
            switch (addr_mode) \
            {\
                case ADDR_MODE_CONST: \
                    write_double(&cur_ptr, arg); \
                    break; \
                case ADDR_MODE_REGISTER: \
                    write_byte(&cur_ptr, reg); \
                    break; \
                default: \
                    return ZCPU_ERR_UNKNOWN_ADDR_MODE; \
            } \
            if (check_for_comma(&str_ptr) != ZCPU_OK) \
            {{ \
                return ZCPU_ERR_WRONG_INPUT; \
            }}\
            addr_mode = ADDR_MODE_CONST; \
            skip_comments(&str_ptr); \
            if (read_const_arg(&str_ptr, &arg) == ZCPU_OK) \
            { \
                addr_mode = 2; \
            } \
            else if (read_reg(&str_ptr, &reg) == ZCPU_OK) \
            { \
                addr_mode = 3; \
            } \
            else \
            { \
                return ZCPU_ERR_WRONG_INPUT; \
            } \
            \
            write_byte(&cur_ptr, addr_mode); \
            switch (addr_mode) \
            {\
                case ADDR_MODE_CONST: \
                    write_double(&cur_ptr, arg); \
                    break; \
                case ADDR_MODE_REGISTER: \
                    write_byte(&cur_ptr, reg); \
                    break; \
                default: \
                    return ZCPU_ERR_UNKNOWN_ADDR_MODE; \
            } \
\
 \
            break; \
        case CMD_JNE:\
            addr_mode = ADDR_MODE_CONST; \
            skip_comments(&str_ptr); \
            if (read_const_arg(&str_ptr, &arg) == ZCPU_OK) \
            { \
                addr_mode = 2; \
            } \
            else if (read_reg(&str_ptr, &reg) == ZCPU_OK) \
            { \
                addr_mode = 3; \
            } \
            else \
            { \
                return ZCPU_ERR_WRONG_INPUT; \
            } \
            \
            write_byte(&cur_ptr, addr_mode); \
            switch (addr_mode) \
            {\
                case ADDR_MODE_CONST: \
                    write_double(&cur_ptr, arg); \
                    break; \
                case ADDR_MODE_REGISTER: \
                    write_byte(&cur_ptr, reg); \
                    break; \
                default: \
                    return ZCPU_ERR_UNKNOWN_ADDR_MODE; \
            } \
            if (check_for_comma(&str_ptr) != ZCPU_OK) \
            {{ \
                return ZCPU_ERR_WRONG_INPUT; \
            }}\
            addr_mode = ADDR_MODE_CONST; \
            skip_comments(&str_ptr); \
            if (read_const_arg(&str_ptr, &arg) == ZCPU_OK) \
            { \
                addr_mode = 2; \
            } \
            else if (read_reg(&str_ptr, &reg) == ZCPU_OK) \
            { \
                addr_mode = 3; \
            } \
            else \
            { \
                return ZCPU_ERR_WRONG_INPUT; \
            } \
            \
            write_byte(&cur_ptr, addr_mode); \
            switch (addr_mode) \
            {\
                case ADDR_MODE_CONST: \
                    write_double(&cur_ptr, arg); \
                    break; \
                case ADDR_MODE_REGISTER: \
                    write_byte(&cur_ptr, reg); \
                    break; \
                default: \
                    return ZCPU_ERR_UNKNOWN_ADDR_MODE; \
            } \
            if (check_for_comma(&str_ptr) != ZCPU_OK) \
            {{ \
                return ZCPU_ERR_WRONG_INPUT; \
            }}\
            addr_mode = ADDR_MODE_CONST; \
            skip_comments(&str_ptr); \
            if (read_const_arg(&str_ptr, &arg) == ZCPU_OK) \
            { \
                addr_mode = 2; \
            } \
            else if (read_reg(&str_ptr, &reg) == ZCPU_OK) \
            { \
                addr_mode = 3; \
            } \
            else \
            { \
                return ZCPU_ERR_WRONG_INPUT; \
            } \
            \
            write_byte(&cur_ptr, addr_mode); \
            switch (addr_mode) \
            {\
                case ADDR_MODE_CONST: \
                    write_double(&cur_ptr, arg); \
                    break; \
                case ADDR_MODE_REGISTER: \
                    write_byte(&cur_ptr, reg); \
                    break; \
                default: \
                    return ZCPU_ERR_UNKNOWN_ADDR_MODE; \
            } \
\
 \
            break; \
        case CMD_JA:\
            addr_mode = ADDR_MODE_CONST; \
            skip_comments(&str_ptr); \
            if (read_const_arg(&str_ptr, &arg) == ZCPU_OK) \
            { \
                addr_mode = 2; \
            } \
            else if (read_reg(&str_ptr, &reg) == ZCPU_OK) \
            { \
                addr_mode = 3; \
            } \
            else \
            { \
                return ZCPU_ERR_WRONG_INPUT; \
            } \
            \
            write_byte(&cur_ptr, addr_mode); \
            switch (addr_mode) \
            {\
                case ADDR_MODE_CONST: \
                    write_double(&cur_ptr, arg); \
                    break; \
                case ADDR_MODE_REGISTER: \
                    write_byte(&cur_ptr, reg); \
                    break; \
                default: \
                    return ZCPU_ERR_UNKNOWN_ADDR_MODE; \
            } \
            if (check_for_comma(&str_ptr) != ZCPU_OK) \
            {{ \
                return ZCPU_ERR_WRONG_INPUT; \
            }}\
            addr_mode = ADDR_MODE_CONST; \
            skip_comments(&str_ptr); \
            if (read_const_arg(&str_ptr, &arg) == ZCPU_OK) \
            { \
                addr_mode = 2; \
            } \
            else if (read_reg(&str_ptr, &reg) == ZCPU_OK) \
            { \
                addr_mode = 3; \
            } \
            else \
            { \
                return ZCPU_ERR_WRONG_INPUT; \
            } \
            \
            write_byte(&cur_ptr, addr_mode); \
            switch (addr_mode) \
            {\
                case ADDR_MODE_CONST: \
                    write_double(&cur_ptr, arg); \
                    break; \
                case ADDR_MODE_REGISTER: \
                    write_byte(&cur_ptr, reg); \
                    break; \
                default: \
                    return ZCPU_ERR_UNKNOWN_ADDR_MODE; \
            } \
            if (check_for_comma(&str_ptr) != ZCPU_OK) \
            {{ \
                return ZCPU_ERR_WRONG_INPUT; \
            }}\
            addr_mode = ADDR_MODE_CONST; \
            skip_comments(&str_ptr); \
            if (read_const_arg(&str_ptr, &arg) == ZCPU_OK) \
            { \
                addr_mode = 2; \
            } \
            else if (read_reg(&str_ptr, &reg) == ZCPU_OK) \
            { \
                addr_mode = 3; \
            } \
            else \
            { \
                return ZCPU_ERR_WRONG_INPUT; \
            } \
            \
            write_byte(&cur_ptr, addr_mode); \
            switch (addr_mode) \
            {\
                case ADDR_MODE_CONST: \
                    write_double(&cur_ptr, arg); \
                    break; \
                case ADDR_MODE_REGISTER: \
                    write_byte(&cur_ptr, reg); \
                    break; \
                default: \
                    return ZCPU_ERR_UNKNOWN_ADDR_MODE; \
            } \
\
 \
            break; \
        case CMD_JAE:\
            addr_mode = ADDR_MODE_CONST; \
            skip_comments(&str_ptr); \
            if (read_const_arg(&str_ptr, &arg) == ZCPU_OK) \
            { \
                addr_mode = 2; \
            } \
            else if (read_reg(&str_ptr, &reg) == ZCPU_OK) \
            { \
                addr_mode = 3; \
            } \
            else \
            { \
                return ZCPU_ERR_WRONG_INPUT; \
            } \
            \
            write_byte(&cur_ptr, addr_mode); \
            switch (addr_mode) \
            {\
                case ADDR_MODE_CONST: \
                    write_double(&cur_ptr, arg); \
                    break; \
                case ADDR_MODE_REGISTER: \
                    write_byte(&cur_ptr, reg); \
                    break; \
                default: \
                    return ZCPU_ERR_UNKNOWN_ADDR_MODE; \
            } \
            if (check_for_comma(&str_ptr) != ZCPU_OK) \
            {{ \
                return ZCPU_ERR_WRONG_INPUT; \
            }}\
            addr_mode = ADDR_MODE_CONST; \
            skip_comments(&str_ptr); \
            if (read_const_arg(&str_ptr, &arg) == ZCPU_OK) \
            { \
                addr_mode = 2; \
            } \
            else if (read_reg(&str_ptr, &reg) == ZCPU_OK) \
            { \
                addr_mode = 3; \
            } \
            else \
            { \
                return ZCPU_ERR_WRONG_INPUT; \
            } \
            \
            write_byte(&cur_ptr, addr_mode); \
            switch (addr_mode) \
            {\
                case ADDR_MODE_CONST: \
                    write_double(&cur_ptr, arg); \
                    break; \
                case ADDR_MODE_REGISTER: \
                    write_byte(&cur_ptr, reg); \
                    break; \
                default: \
                    return ZCPU_ERR_UNKNOWN_ADDR_MODE; \
            } \
            if (check_for_comma(&str_ptr) != ZCPU_OK) \
            {{ \
                return ZCPU_ERR_WRONG_INPUT; \
            }}\
            addr_mode = ADDR_MODE_CONST; \
            skip_comments(&str_ptr); \
            if (read_const_arg(&str_ptr, &arg) == ZCPU_OK) \
            { \
                addr_mode = 2; \
            } \
            else if (read_reg(&str_ptr, &reg) == ZCPU_OK) \
            { \
                addr_mode = 3; \
            } \
            else \
            { \
                return ZCPU_ERR_WRONG_INPUT; \
            } \
            \
            write_byte(&cur_ptr, addr_mode); \
            switch (addr_mode) \
            {\
                case ADDR_MODE_CONST: \
                    write_double(&cur_ptr, arg); \
                    break; \
                case ADDR_MODE_REGISTER: \
                    write_byte(&cur_ptr, reg); \
                    break; \
                default: \
                    return ZCPU_ERR_UNKNOWN_ADDR_MODE; \
            } \
\
 \
            break; \
        case CMD_JB:\
            addr_mode = ADDR_MODE_CONST; \
            skip_comments(&str_ptr); \
            if (read_const_arg(&str_ptr, &arg) == ZCPU_OK) \
            { \
                addr_mode = 2; \
            } \
            else if (read_reg(&str_ptr, &reg) == ZCPU_OK) \
            { \
                addr_mode = 3; \
            } \
            else \
            { \
                return ZCPU_ERR_WRONG_INPUT; \
            } \
            \
            write_byte(&cur_ptr, addr_mode); \
            switch (addr_mode) \
            {\
                case ADDR_MODE_CONST: \
                    write_double(&cur_ptr, arg); \
                    break; \
                case ADDR_MODE_REGISTER: \
                    write_byte(&cur_ptr, reg); \
                    break; \
                default: \
                    return ZCPU_ERR_UNKNOWN_ADDR_MODE; \
            } \
            if (check_for_comma(&str_ptr) != ZCPU_OK) \
            {{ \
                return ZCPU_ERR_WRONG_INPUT; \
            }}\
            addr_mode = ADDR_MODE_CONST; \
            skip_comments(&str_ptr); \
            if (read_const_arg(&str_ptr, &arg) == ZCPU_OK) \
            { \
                addr_mode = 2; \
            } \
            else if (read_reg(&str_ptr, &reg) == ZCPU_OK) \
            { \
                addr_mode = 3; \
            } \
            else \
            { \
                return ZCPU_ERR_WRONG_INPUT; \
            } \
            \
            write_byte(&cur_ptr, addr_mode); \
            switch (addr_mode) \
            {\
                case ADDR_MODE_CONST: \
                    write_double(&cur_ptr, arg); \
                    break; \
                case ADDR_MODE_REGISTER: \
                    write_byte(&cur_ptr, reg); \
                    break; \
                default: \
                    return ZCPU_ERR_UNKNOWN_ADDR_MODE; \
            } \
            if (check_for_comma(&str_ptr) != ZCPU_OK) \
            {{ \
                return ZCPU_ERR_WRONG_INPUT; \
            }}\
            addr_mode = ADDR_MODE_CONST; \
            skip_comments(&str_ptr); \
            if (read_const_arg(&str_ptr, &arg) == ZCPU_OK) \
            { \
                addr_mode = 2; \
            } \
            else if (read_reg(&str_ptr, &reg) == ZCPU_OK) \
            { \
                addr_mode = 3; \
            } \
            else \
            { \
                return ZCPU_ERR_WRONG_INPUT; \
            } \
            \
            write_byte(&cur_ptr, addr_mode); \
            switch (addr_mode) \
            {\
                case ADDR_MODE_CONST: \
                    write_double(&cur_ptr, arg); \
                    break; \
                case ADDR_MODE_REGISTER: \
                    write_byte(&cur_ptr, reg); \
                    break; \
                default: \
                    return ZCPU_ERR_UNKNOWN_ADDR_MODE; \
            } \
\
 \
            break; \
        case CMD_JBE:\
            addr_mode = ADDR_MODE_CONST; \
            skip_comments(&str_ptr); \
            if (read_const_arg(&str_ptr, &arg) == ZCPU_OK) \
            { \
                addr_mode = 2; \
            } \
            else if (read_reg(&str_ptr, &reg) == ZCPU_OK) \
            { \
                addr_mode = 3; \
            } \
            else \
            { \
                return ZCPU_ERR_WRONG_INPUT; \
            } \
            \
            write_byte(&cur_ptr, addr_mode); \
            switch (addr_mode) \
            {\
                case ADDR_MODE_CONST: \
                    write_double(&cur_ptr, arg); \
                    break; \
                case ADDR_MODE_REGISTER: \
                    write_byte(&cur_ptr, reg); \
                    break; \
                default: \
                    return ZCPU_ERR_UNKNOWN_ADDR_MODE; \
            } \
            if (check_for_comma(&str_ptr) != ZCPU_OK) \
            {{ \
                return ZCPU_ERR_WRONG_INPUT; \
            }}\
            addr_mode = ADDR_MODE_CONST; \
            skip_comments(&str_ptr); \
            if (read_const_arg(&str_ptr, &arg) == ZCPU_OK) \
            { \
                addr_mode = 2; \
            } \
            else if (read_reg(&str_ptr, &reg) == ZCPU_OK) \
            { \
                addr_mode = 3; \
            } \
            else \
            { \
                return ZCPU_ERR_WRONG_INPUT; \
            } \
            \
            write_byte(&cur_ptr, addr_mode); \
            switch (addr_mode) \
            {\
                case ADDR_MODE_CONST: \
                    write_double(&cur_ptr, arg); \
                    break; \
                case ADDR_MODE_REGISTER: \
                    write_byte(&cur_ptr, reg); \
                    break; \
                default: \
                    return ZCPU_ERR_UNKNOWN_ADDR_MODE; \
            } \
            if (check_for_comma(&str_ptr) != ZCPU_OK) \
            {{ \
                return ZCPU_ERR_WRONG_INPUT; \
            }}\
            addr_mode = ADDR_MODE_CONST; \
            skip_comments(&str_ptr); \
            if (read_const_arg(&str_ptr, &arg) == ZCPU_OK) \
            { \
                addr_mode = 2; \
            } \
            else if (read_reg(&str_ptr, &reg) == ZCPU_OK) \
            { \
                addr_mode = 3; \
            } \
            else \
            { \
                return ZCPU_ERR_WRONG_INPUT; \
            } \
            \
            write_byte(&cur_ptr, addr_mode); \
            switch (addr_mode) \
            {\
                case ADDR_MODE_CONST: \
                    write_double(&cur_ptr, arg); \
                    break; \
                case ADDR_MODE_REGISTER: \
                    write_byte(&cur_ptr, reg); \
                    break; \
                default: \
                    return ZCPU_ERR_UNKNOWN_ADDR_MODE; \
            } \
\
 \
            break; \
    default: \
        return ZCPU_ERR_CMD_NOT_IMPLEMENTED; \
}

#endif /* ifndef cpu_arch_h */

